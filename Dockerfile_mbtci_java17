FROM debian:bullseye-slim
#FROM sapmachine:17

# Build time arguments
ARG MTA_USER="mta"
ARG MTA_USER_HOME=/home/mta
ARG MBT_VERSION=1.2.86
ARG GO_VERSION=1.19.3
ARG NODE_VERSION=NODE_VERSION_TEMPLATE
ARG MAVEN_VERSION=3.8.6
ARG MAVEN_BASE_URL=https://downloads.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries
ARG SAPMACHINE_VERSION=17.0.5

# Environment variables
ENV PYTHON /usr/bin/python3
ENV MAVEN_HOME /usr/share/maven
ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV DEBIAN_FRONTEND=noninteractive

# create user account and using openssl to create password
RUN set -ex \
  && apt-get update \
  && apt-get install -y openssl --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
   # smoke test
  && openssl version \
  && useradd --home-dir ${MTA_USER_HOME} \
            --create-home \
            --shell /bin/bash \
            --user-group \
            --uid 1000 \
            --comment 'Cloud MTA Build Tool' \
            --password "$(echo weUseMta | openssl passwd -1 -stdin)" ${MTA_USER} \
  # allow anybody to write into the image user home directory
  && chmod a+w ${MTA_USER_HOME}

# download SAP_Global_Root_CA.crt to target 
ADD http://aia.pki.co.sap.com/aia/SAP%20Global%20Root%20CA.crt \
    /etc/ssl/certs/SAP_Global_Root_CA.crt

# install node
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
      amd64) ARCH='x64';; \
      ppc64el) ARCH='ppc64le';; \
      s390x) ARCH='s390x';; \
      arm64) ARCH='arm64';; \
      armhf) ARCH='armv7l';; \
      i386) ARCH='x86';; \
      *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && set -ex \
    && apt-get update \
    # libatomic1 for arm
    && apt-get install -y ca-certificates curl gnupg dirmngr xz-utils libatomic1 --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && for key in \
      4ED778F539E3634C779C87C6D7062848A1AB005C \
      141F07595B7B3FFE74309A937405533BE57C7D57 \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      74F12602B6F1C4E913FAA37AD3A89613643B6201 \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      61FC681DFB92A079F1685E77973F295594EC4689 \
      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
      890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
      C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
      108F52B48DB57BB0CC439B2997B01419BD92F80A \
      B9E2F5981AA6E0CD28160D9FF13993A75599653C \
    ; do \
      gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
      gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$ARCH.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep " node-$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf "node-$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && rm "node-$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
    && apt-mark auto '.*' > /dev/null \
    && find /usr/local -type f -executable -exec ldd '{}' ';' \
      | awk '/=>/ { print $(NF-1) }' \
      | sort -u \
      | xargs -r dpkg-query --search \
      | cut -d: -f1 \
      | sort -u \
      | xargs -r apt-mark manual \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs \
    # smoke tests
    && echo "node ${NODE_VERSION} install smoke tests!" \
    && node --version \
    && npm --version

# install node (commented by young-yang03) 
	# NODE_HOME=/opt/nodejs; mkdir -p ${NODE_HOME} && \
    # curl --fail --silent --output - "https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.gz" \
    #  | tar -xzv -f - -C "${NODE_HOME}" && \
    # ln -s "${NODE_HOME}/node-${NODE_VERSION}-linux-x64/bin/node" /usr/local/bin/node && \
    # ln -s "${NODE_HOME}/node-${NODE_VERSION}-linux-x64/bin/npm" /usr/local/bin/npm && \
    # ln -s "${NODE_HOME}/node-${NODE_VERSION}-linux-x64/bin/npx" /usr/local/bin/ && \
    # npm install --prefix /usr/local/ -g grunt-cli && \

# install ui5-cli temporay solution
RUN	set -ex \
    && npm install --prefix /usr/local/ -g @ui5/cli \
    && npm cache clean -g --force \
    # smoke tests
    && echo "ui5 install smoke tests!" \
    && ui5 --version

# install Golang
RUN	set -ex \
    && apt-get update \
    && apt-get install -y ca-certificates curl --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && curl -O https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz \
    && tar -xzf go${GO_VERSION}.linux-amd64.tar.gz \
    # && curl -O https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz \
    # && tar -xvf go${GO_VERSION}.linux-amd64.tar.gz \
    && rm -rf /usr/local/go \
    && mv go /usr/local \
    && mkdir -p "$GOPATH/src" "$GOPATH/bin" \
    && chmod -R 777 "$GOPATH" \
    && mkdir -p ${GOPATH}/src ${GOPATH}/bin \
    # smoke tests
    && echo "go ${GO_VERSION} install smoke tests!" \
    && go version

RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
      amd64) ARCH='amd64';; \
      *) echo "unsupported architecture"; exit 1 ;; \
    esac \
  && set -ex \
  && apt-get update \
  && apt-get install -y ca-certificates gnupg dirmngr --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
  && for key in \
    CACB9FE09150307D1D22D82962754C3B3ABCFE23 \
  ; do \
    gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/sapmachine.gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/sapmachine.gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" ; \
  done \
  && chmod 644 /etc/apt/trusted.gpg.d/sapmachine.gpg \
  && echo "deb http://dist.sapmachine.io/debian/${ARCH}/ ./" | tee /etc/apt/sources.list.d/sapmachine.list \
  && apt-get update \
  && apt-get install -y sapmachine-$(echo ${SAPMACHINE_VERSION} | cut -d. -f1)-jdk=${SAPMACHINE_VERSION} --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get remove --purge --autoremove -y ca-certificates gnupg dirmngr \
  # smoke test
  && echo "sapmachine ${SAPMACHINE_VERSION} install smoke tests!" \
  && java --version


# install maven
RUN set -ex \
  && apt-get update \
  && apt-get install -y ca-certificates curl gnupg dirmngr --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
  && curl -fsSLO --compressed ${MAVEN_BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz \
  && curl -fsSLO --compressed ${MAVEN_BASE_URL}/apache-maven-${MAVEN_VERSION}-bin.tar.gz.asc \
  && for key in \
    6A814B1F869C2BBEAB7CB7271A2A1C94BDE89688 \
  ; do \
    gpg --batch --keyserver hkps://pgp.surf.nl --recv-keys "$key" || \
    gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" ; \
  done \
  && gpg --batch --verify apache-maven-${MAVEN_VERSION}-bin.tar.gz.asc apache-maven-${MAVEN_VERSION}-bin.tar.gz \
  && mkdir -p ${MAVEN_HOME} ${MAVEN_HOME}/ref \
  && tar -xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz -C ${MAVEN_HOME} --strip-components=1 \
  && rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz.asc apache-maven-${MAVEN_VERSION}-bin.tar.gz \
  && chmod --recursive a+w ${MAVEN_HOME}/conf/* \
  && ln -s ${MAVEN_HOME}/bin/mvn /usr/bin/mvn \
  && apt-get remove --purge --autoremove -y ca-certificates curl gnupg dirmngr \
  # smoke tests
  && echo "mvn ${MAVEN_VERSION} smoke tests!" \
  && mvn --version

# install maven (commnet by young-yang03)
# ENV M2_HOME=/opt/maven/apache-maven-${MAVEN_VERSION}

# RUN M2_BASE="$(dirname ${M2_HOME})"  \
#   && mkdir -p "${M2_BASE}" \
#   && curl --fail --silent --output - "https://apache.osuosl.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" \ | tar -xzvf - -C "${M2_BASE}" \
#   && ln -s "${M2_HOME}/bin/mvn" /usr/local/bin/mvn \
#   && chmod --recursive a+w "${M2_HOME}"/conf/* \
#   && echo "mvn ${MAVEN_VERSION} smoke tests!"
#   # mvn --version

# Install MBT
RUN	set -ex \
  && apt-get update \
  && apt-get install -y ca-certificates curl --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
  && curl -L "https://github.com/young-yang03/cloud-mta-build-tool/releases/download/v${MBT_VERSION}/cloud-mta-build-tool_${MBT_VERSION}_Linux_amd64.tar.gz" | tar -zx -C /usr/local/bin \
  && chown root:root /usr/local/bin/mbt \
  # smoke tests
  && echo "mbt ${MBT_VERSION} install smoke tests!" \
  && mbt --version

# Install essential build tools and python
RUN set -ex \
  && apt-get update \
  && apt-get install -y ca-certificates build-essential python2.7 python3 --no-install-recommends \
  && rm -rf /var/lib/apt/lists/* \
  # smoke tests
  && echo "python install smoke tests!" \
  && python2.7 --version \
  && python3 --version

ENV PATH=$PATH:./node_modules/.bin HOME=${MTA_USER_HOME}
WORKDIR /project
USER ${MTA_USER}
